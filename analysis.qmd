---
title: "Analysis Walkthrough"
format:
  html:
    css: styles.css
    embed-resources: true
    code-fold: false
    page-layout: full
    fig_caption: true
    toc: false
---

::: {#page-banner}
<h1 class="page-title">

Analysis Walkthrough

</h1>
:::

:::: narrow-page
## About the Data

This dataset includes 289 deaths in [West Virginia Division of Corrections and Rehabilitation (DCR)](https://dcr.wv.gov/Pages/default.aspx) custody from January 2020 through March 2025. It was obtained by the [West Virginia Center on Budget and Policy](https://wvpolicy.org/) through a FOIA request filed by senior policy analyst [Sara Whitaker](https://wvpolicy.org/team/).

Each row represents a death, with key fields including:

-   `date_of_death` and `booking_date`
-   `age`, `race`, `gender`
-   `facility` and `offender_status` (e.g., pretrial vs. sentenced)
-   `manner_of_death` and `cause_of_death`

DCR’s annual reports do not publish this level of detail. Jail deaths are excluded, and no information is provided by facility, demographics, or cause. This dataset allows for deeper analysis of where, when, and how people are dying in custody.

## Exploratory Data Analysis

In this section, we’ll begin exploring:

-   How many deaths occurred each year?
-   Which facilities have the highest number of deaths?
-   How do deaths vary by custody status (pretrial vs. sentenced)?
-   Are certain groups disproportionately affected?
-   Are facilities with high mortality rates experiencing overcrowding?

We’ll also examine patterns in cause of death and compare counts to what DCR reports in its official publications.

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = FALSE,
  warning = FALSE,
  message = FALSE,
  include = TRUE
)

source("R/setup.R")
source("R/utils_helpers.R")

# Load WV Center on Budget and Policy data
wvcbp_deaths <- readRDS("data/wvcbp_deaths_in_custody.rds")

df <- prepare_deaths_data(wvcbp_deaths)
df_wo_2025 <- df |> filter(year < 2025)
```

## Annual Trends

```{r}
plot_deaths_by_year(df_wo_2025)
```

## Demographics
::: {.panel-tabset .nav-pills}

### Race

`r generate_summary_sentence(df_wo_2025, "race")`

```{r}
plot_deaths_by_var(df_wo_2025, "race") |>
  hc_chart(height = 350)
```

### Gender

`r generate_summary_sentence(df_wo_2025, "gender")`

```{r}
plot_deaths_by_var(df_wo_2025, "gender") |>
  hc_chart(height = 350)
```

### Age

`r generate_summary_sentence(df_wo_2025, "age")`

```{r}
plot_deaths_by_var(df_wo_2025, "age") |>
  hc_chart(height = 350)
```
:::

## Offender Status (Jail)

```{r}
df_jail <- df_wo_2025 |> filter(type == "Jail")
```

`r generate_summary_sentence(df_jail, "offender_status")`

```{r}
plot_deaths_by_var(df_jail, "offender_status")
```

## Offender Status (Prison)

```{r, asis=TRUE}
df_prison <- df_wo_2025 |> filter(type == "Prison")
```

`r generate_summary_sentence(df_prison, "offender_status")`

```{r}
plot_deaths_by_var(df_prison, "offender_status") 
```


## Cause and Manner of Death

`r generate_summary_sentence(df_wo_2025, "cause_of_death")`

```{r}
plot_deaths_by_var(df_wo_2025, "cause_of_death")
```

`r generate_summary_sentence(df_wo_2025, "manner_of_death")`

```{r}
plot_deaths_by_var(df_wo_2025, "manner_of_death")
```

## Facilities With the Most Deaths

```{r}
top_facilities <- df_wo_2025 |>
  group_by(type, facility_name) |>
  summarise(total_deaths = n(), .groups = "drop") |>
  arrange(desc(total_deaths))

# Get top 2 jails and top 2 prisons
top_prisons <- top_facilities |> filter(type == "Prison") |> slice_max(total_deaths, n = 2)
top_jails <- top_facilities |> filter(type == "Jail") |> slice_max(total_deaths, n = 2)

# Format sentence
sentence <- paste0(
  "From 2020 to 2024, the prisons with the most deaths were ",
  top_prisons$facility_name[1], " and ", top_prisons$facility_name[2],
  ". The jails with the most deaths were ",
  top_jails$facility_name[1], " and ", top_jails$facility_name[2], "."
)
```
`r sentence`

```{r}
reactable(
  top_facilities,
  theme = reactable_theme(),
  filterable = FALSE,
  pagination = FALSE,
  defaultColDef = colDef(na = "–"),
  columns = list(
    type = colDef(name = "Facility Type"),
    facility_name = colDef(name = "Facility Name"),
    total_deaths = colDef(name = "Total Deaths")
  )
)
```

## Net Change in Deaths: 2020 vs 2024

```{r}
calculate_net_change <- function(df_wo_2025, start_year = 2020, end_year = 2024) {
  df_wo_2025 |>
    filter(year %in% c(start_year, end_year)) |>
    count(facility_name, year) |>
    pivot_wider(names_from = year, values_from = n, values_fill = 0) |>
    mutate(net_change = !!sym(as.character(end_year)) - !!sym(as.character(start_year))) |>
    arrange(desc(net_change))
}

net_change_df <- calculate_net_change(df) |> 
  arrange(desc(net_change))
reactable(
  net_change_df,
  theme = reactable_theme(),
  filterable = FALSE,
  pagination = FALSE,
  defaultColDef = colDef(na = "–"),
  columns = list(
    facility_name = colDef(name = "Facility Name"),
    net_change = colDef(name = "Net Change")
  )
)
```

::::
